why docker :- docker makes it really easy to install and run software without worrying about setup or dependencies
what is docker:- docker is a platform or ecosystem around creating  and running containers
what is ecosystem:- means docker client  |
						  docker server	 |
						  docker machine | these all tools and peice of sofware are togeather became ecosystem or platform of docker
						  docker images	 |
						  docker hub	 |
						  docker compose |

docker version is the command to check the version of docker which installed on your local machine
		docker version
docker run:- docker run is the command to pull the image from hub if we dont find anything in locally 
			steps for the pull
			"docker run hello-world"
			 1. The Docker client contacted the Docker daemon.
			 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
				(amd64)
			 3. The Docker daemon created a new container from that image which runs the
				executable that produces the output you are currently reading.
			 4. The Docker daemon streamed that output to the Docker client, which sent it
				to your terminal.
docker cli:- cli is also called client it is the tool that we are going to issue commands and it actually doesnt do anything with container and images this is help to interact with the another peice of software that called docker server 
	docker server is also called docker daemon

docker server:- this is actually a peice of software responsible for craeting containers images maintaining containers uploading images and everything possibly maching around the world of docker
				the deamon is nothing but docker server
				
what is a container:- a container is a instance of an image 

image:- image is a single file with all the dependencies and configurations repuired to run a specific program and to create a container

docker run workflow: once we run the docker run command 1st it will check the local machine wheather we have that image or not if it doesnt find locally next it will pull from docker hub and container will be created 
namespacing: isolating resources per process

control groups:limit amount of resources used per process

section 1 12.video not understood

what is container: container is a running process along with a subset of physical resources on the computer or allocated to the	process specifically

what is image: image is a snapshot of file system and very specific startup command as well

docker run in detail:
 create and running a container using an image
		docker run <imagename>
		
how to see the running containers in docker:
	"docker ps" is the command to see the running containers
	"docker ps -a" is the command for all the containers that running and not running containers
	"docker ps --all" is also the same command like docker ps -a
			for ecah one of them is container id  |
									image		  |
									command		  |
									created time  |this all will be here for the containers
									status		  |
									ports		  |
									names		  |


containers life cycle:
	when we execute "docker run" command it will run 2 more commands i.e docker create+docker start togeather 
			create command create a container and start will start the image
			we can't start and attach multiple containers at once

removing stoped containers:
	"docker system prune" is the command to remove the all stopped containers and it will ask for y/n so that we can choose to delete or not 
	this will remove following 
	- all stopped containers
	- all networks not used by at least one container
	- all dangling images
	- all dangling build cache (reclaimed space means deleted space)
		we can remove containers by using "docker rm <container id>"
	
getting logs from containers:
	"docker logs container id" this will give the log info about the container means like "echo hii" and also we can setup and debug the container

stopping docker containers:
	we can do it in 2 ways 
		docker stop <container id>
		docker kill <container id>
				both of these are used to stop the running containers
			in docker stop command a SIGTERM(terminate) is sent to the process to shutdown on its own time mean it will take minimum of 10sec
			in docker kill command a SIGKILL(KILL) is sent to the process to shutdown immediately means right now
		we better to prefer only stop command it will tak their time
		
executing commands in running containers:
	docker exec -it <container id> /bin/bash
	  "		"	"		"			redis-cli (we can put how like we want)
				by executing "exec" command we can able to run a second running program inside a running container
				i:(interactive) flag to keep stdin open
				t:(terminal) to allocate a terminal
				d: to run in background
purpose of IT flag:
	the IT flag gives like input and output means I(interactive) input will gives input to terminal and T(terminal) this will gives the output or thee error will be displayed on the terminal
		in the execution of exec at the end we use /bin/bash or sh or redis-cli or etc these all are command processors that are something allow us to type commands
starting with shell:
			docker run -it <image name> sh
container isolation:
 isolation means vidiga unchatam i.e the containers can be isolated with each other
 
 docker file:docker file is configuration to define how our container should behave specifically what diferent programs it contain and what it does when it starts up as a container 
	docker file --> docker client(cli or terminal)-->docker server--> usable image.
	flow: specify the base image
					|
					|
		  run some commands to install additional programs
					|
					|
		  specify a command to run on container startup

Dockerfile:
		from: which docker image we want as a base image (ex:alpine or ubuntu or centos)
		
		run: to execute some command while preparing custom image
		
		cmd: is used for specify what should be executed when a image is used start up for brand new container 

			
